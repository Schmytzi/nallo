Changes in module 'nf-core/hifiasm'
--- modules/nf-core/hifiasm/meta.yml
+++ modules/nf-core/hifiasm/meta.yml
@@ -32,9 +32,6 @@
   - maternal_kmer_dump:
       type: file
       description: Yak kmer dump file for maternal reads (can be used for haplotype resolution). It can have an arbitrary extension.
-  - use_parental_kmers:
-      type: logical
-      description: A flag (true or false) signalling if the module should use the paternal and maternal kmer dumps.
   - hic_read1:
       type: file
       description: Hi-C data Forward reads.

--- modules/nf-core/hifiasm/main.nf
+++ modules/nf-core/hifiasm/main.nf
@@ -1,30 +1,40 @@
 process HIFIASM {
     tag "$meta.id"
+
     label 'process_high'
+    label 'process_high_memory'
+    label 'process_long'
 
-    conda "bioconda::hifiasm=0.18.5"
+    conda "bioconda::hifiasm=0.19.5"
     container "${ workflow.containerEngine == 'singularity' && !task.ext.singularity_pull_docker_container ?
-        'https://depot.galaxyproject.org/singularity/hifiasm:0.18.5--h5b5514e_0' :
-        'biocontainers/hifiasm:0.18.5--h5b5514e_0' }"
+        'https://depot.galaxyproject.org/singularity/hifiasm:0.19.5--h5b5514e_1' :
+        'biocontainers/hifiasm:0.19.5--h5b5514e_1' }"
 
     input:
-    tuple val(meta), path(reads)
-    path  paternal_kmer_dump
-    path  maternal_kmer_dump
+    tuple val(meta),  path(reads), path(paternal_kmer_dump), path(maternal_kmer_dump)
     path  hic_read1
     path  hic_read2
 
     output:
-    tuple val(meta), path("*.r_utg.gfa")       , emit: raw_unitigs
-    tuple val(meta), path("*.ec.bin")          , emit: corrected_reads
-    tuple val(meta), path("*.ovlp.source.bin") , emit: source_overlaps
-    tuple val(meta), path("*.ovlp.reverse.bin"), emit: reverse_overlaps
-    tuple val(meta), path("*.p_utg.gfa")       , emit: processed_unitigs, optional: true
-    tuple val(meta), path("*.asm.p_ctg.gfa")   , emit: primary_contigs  , optional: true
-    tuple val(meta), path("*.asm.a_ctg.gfa")   , emit: alternate_contigs, optional: true
-    tuple val(meta), path("*.hap1.p_ctg.gfa")  , emit: paternal_contigs , optional: true
-    tuple val(meta), path("*.hap2.p_ctg.gfa")  , emit: maternal_contigs , optional: true
-    path  "versions.yml"                       , emit: versions
+    tuple val(meta), path("*.{dip,bp}.r_utg.gfa")      , emit: raw_unitigs
+    tuple val(meta), path("*.{dip,bp}.r_utg.lowQ.bed") , emit: raw_unitigs_lowq        , optional: true
+    tuple val(meta), path("*.{dip,bp}.r_utg.noseq.gfa"), emit: raw_unitigs_noseq       , optional: true
+    tuple val(meta), path("*.ec.bin")                  , emit: corrected_reads
+    tuple val(meta), path("*.ovlp.source.bin")         , emit: source_overlaps
+    tuple val(meta), path("*.ovlp.reverse.bin")        , emit: reverse_overlaps
+    tuple val(meta), path("*.{dip,bp}.p_utg.gfa")      , emit: processed_unitigs       , optional: true
+    tuple val(meta), path("*.{dip,bp}.p_utg.lowQ.bed") , emit: processed_unitigs_lowq  , optional: true
+    tuple val(meta), path("*.{dip,bp}.p_utg.noseq.gfa"), emit: processed_unitigs_noseq , optional: true
+    tuple val(meta), path("*.{dip,bp}.p_ctg.gfa")      , emit: primary_contigs         , optional: true
+    tuple val(meta), path("*.{dip,bp).p_ctg.lowQ.bed") , emit: primary_contigs_lowq    , optional: true
+    tuple val(meta), path("*.{dip,bp}.p_ctg.noseq.gfa"), emit: primary_contigs_noseq   , optional: true
+    tuple val(meta), path("*.hap1.p_ctg.gfa")          , emit: paternal_contigs        , optional: true
+    tuple val(meta), path("*.hap2.p_ctg.gfa")          , emit: maternal_contigs        , optional: true
+    tuple val(meta), path("*.hap1.p_ctg.lowQ.bed")     , emit: paternal_lowq           , optional: true
+    tuple val(meta), path("*.hap2.p_ctg.lowQ.bed")     , emit: maternal_lowq           , optional: true
+    tuple val(meta), path("*.hap1.p_ctg.noseq.gfa")    , emit: paternal_noseq          , optional: true
+    tuple val(meta), path("*.hap2.p_ctg.noseq.gfa")    , emit: maternal_noseq          , optional: true
+    path  "versions.yml"                               , emit: versions
 
     when:
     task.ext.when == null || task.ext.when

************************************************************
