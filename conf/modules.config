/*
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Config file for defining DSL2 per module options and publishing paths
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Available keys to override module options:
        ext.args   = Additional arguments appended to command in module.
        ext.args2  = Second set of arguments appended to command in module (multi-tool modules).
        ext.args3  = Third set of arguments appended to command in module (multi-tool modules).
        ext.prefix = File name prefix for output files.
----------------------------------------------------------------------------------------
*/

process {

    publishDir = [
        path: { "${params.outdir}/${task.process.tokenize(':')[-1].tokenize('_')[0].toLowerCase()}" },
        mode: params.publish_dir_mode,
        saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
    ]

    withName: SAMPLESHEET_CHECK {
        publishDir = [
            path: { "${params.outdir}/pipeline_info" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: FASTQC {
        ext.args = '--quiet'
        publishDir = [
            path: { "${params.outdir}/qc/fastqc/${meta.id}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
    
    withName: YAK {
        publishDir = [
            // Maybe change this to trio-id?
            path: { "${params.outdir}/genome_assembly/yak/${meta.id}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
    withName: HIFIASM {
        publishDir = [
            // Maybe change this to trio-id?
            path: { "${params.outdir}/genome_assembly/hifiasm/${meta.id}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
    
    withName: GFASTATS {
        ext.args = '--discover-paths'
        publishDir = [
            path: { "${params.outdir}/genome_assembly/gfastats/${meta.id}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
    
    withName: DIPCALL {
        publishDir = [
            path: { "${params.outdir}/assembly_variant_calling/dipcall/${meta.id}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
    
    withName: SNIFFLES {
        publishDir = [
            path: { "${params.outdir}/structural_variant_calling/sniffles/single_sample/${meta.id}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
    
    withName: SNIFFLES_MULTISAMPLE {
        publishDir = [
            path: { "${params.outdir}/structural_variant_calling/sniffles/multi_sample" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: DEEPVARIANT {
        publishDir = [
            path: { "${params.outdir}/short_variant_calling/deepvariant/${meta.id}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
    
    withName: DEEPTRIO {
        publishDir = [
            path: { "${params.outdir}/short_variant_calling/deeptrio/${meta.id}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
    
    withName: GLNEXUS {
        ext.args = '--config DeepVariant_unfiltered'
        publishDir = [
            path: { "${params.outdir}/short_variant_calling/glnexus" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: CUSTOM_DUMPSOFTWAREVERSIONS {
        publishDir = [
            path: { "${params.outdir}/pipeline_info" },
            mode: params.publish_dir_mode,
            pattern: '*_versions.yml'
        ]
    }

    withName: MINIMAP2_ALIGN {
        // Put map-hifi as param? 
        ext.args = "-y -x map-hifi"
        
        publishDir = [
            path: { "${params.outdir}/aligned_reads/minimap2/${meta.id}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: MODKIT_PILEUP {
        ext.args = '--combine-mods --cpg --combine-strands'

        publishDir = [
            path: { "${params.outdir}/methylation/modkit/pileup/${meta.id}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
    
    withName: WHATSHAP_PHASE {
        // TODO: Should -distrust-genotypes be used?
        ext.args = '--ignore-read-groups'

        publishDir = [
            path: { "${params.outdir}/short_variant_calling/whatshap/phase/${meta.id}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
  
    withName: WHATSHAP_HAPLOTAG {
        // TODO: Should supplementary be tagged?
        ext.args = '--ignore-read-groups --tag-supplementary'

        publishDir = [
            path: { "${params.outdir}/aligned_reads/whatshap/haplotag/${meta.id}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: SAMTOOLS_VIEW_HP1 {
        ext.args = '-e \'[HP]==1\' --output-fmt bam'
        ext.prefix = 'hp1'
        publishDir = [
            path: { "${params.outdir}/aligned_reads/samtools/view_hp1/${meta.id}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
    
    withName: SAMTOOLS_VIEW_HP2 {
        ext.args = '-e \'[HP]==2\' --output-fmt bam'
        ext.prefix = 'hp2'
        publishDir = [
            path: { "${params.outdir}/aligned_reads/samtools/view_hp2/${meta.id}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: MOSDEPTH {
        ext.args = "--by 500 --no-per-base"
        
        publishDir = [
            path: { "${params.outdir}/aligned_reads/mosdepth/${meta.id}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: MINIMAP2_INDEX {
        publishDir = [
            path: { "${params.outdir}/prepare_genome/minimap2/index" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
    
    withName: SAMTOOLS_FAIDX {
        publishDir = [
            path: { "${params.outdir}/prepare_genome/samtools/faidx" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
    
    withName: SAMTOOLS_INDEX {
        publishDir = [
            // TODO: This should not be hardcoded as minimap2 
            path: { "${params.outdir}/aligned_reads/minimap2/${meta.id}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
}
