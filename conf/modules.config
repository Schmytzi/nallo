/*
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Config file for defining DSL2 per module options and publishing paths
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Available keys to override module options:
        ext.args   = Additional arguments appended to command in module.
        ext.args2  = Second set of arguments appended to command in module (multi-tool modules).
        ext.args3  = Third set of arguments appended to command in module (multi-tool modules).
        ext.prefix = File name prefix for output files.
----------------------------------------------------------------------------------------
*/

process {

    publishDir = [
        path: { "${params.outdir}/${task.process.tokenize(':')[-1].tokenize('_')[0].toLowerCase()}" },
        mode: params.publish_dir_mode,
        saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
    ]

    /*
    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    QC
    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    */

    withName: FASTQC {
        ext.args = '--quiet'
        publishDir = [
            path: { "${params.outdir}/qc/fastqc/${meta.id}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: FQCRS {
        publishDir = [
            path: { "${params.outdir}/qc/fqcrs/${meta.id}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: CRAMINO {
        ext.args = '--karyotype'
        publishDir = [
            path: { "${params.outdir}/qc/cramino/unphased/${meta.id}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: CRAMINO_PHASED {
        ext.args = '--karyotype --phased'
         publishDir = [
            path: { "${params.outdir}/qc/cramino/phased/${meta.id}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]

    }

    withName: MOSDEPTH {
        ext.args = "--by 500 --no-per-base"

        publishDir = [
            path: { "${params.outdir}/qc/mosdepth/${meta.id}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: MINIMAP2_INDEX {
        if(params.preset == 'revio' | params.preset == 'pacbio') {
            ext.args = "-x map-hifi"
        } else if(params.preset == 'ONT_R9' | params.preset == 'ONT_R10') {
            ext.args = "-x map-ont"
        }
        publishDir = [
            path: { "${params.outdir}/prepare_genome/minimap2/index" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: MINIMAP2_INDEX_DIPCALL {
            ext.args = "-x asm5"
        publishDir = [
            path: { "${params.outdir}/prepare_genome/minimap2/index_dipcall" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: SAMTOOLS_FAIDX {
        publishDir = [
            path: { "${params.outdir}/prepare_genome/samtools/faidx" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    /*
    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Assembly Workflow
    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    */

    withName: YAK {
        publishDir = [
            // Maybe change this to trio-id?
            path: { "${params.outdir}/genome_assembly/yak/${meta.id}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
    withName: HIFIASM {
        publishDir = [
            // Maybe change this to trio-id?
            path: { "${params.outdir}/genome_assembly/hifiasm/${meta.id}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: GFASTATS {
        ext.args = '--discover-paths'
        publishDir = [
            path: { "${params.outdir}/genome_assembly/gfastats/${meta.id}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: DIPCALL {
        publishDir = [
            path: { "${params.outdir}/assembly_variant_calling/dipcall/${meta.id}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: SAMTOOLS_INDEX_DIPCALL {
        publishDir = [
            path: { "${params.outdir}/assembly_variant_calling/dipcall/${meta.id}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    /*
    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Structural variant calling
    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    */

    withName: SNIFFLES {
        publishDir = [
            path: { "${params.outdir}/structural_variant_calling/sniffles/single_sample/${meta.id}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: SNIFFLES_MULTISAMPLE {
        publishDir = [
            path: { "${params.outdir}/structural_variant_calling/sniffles/multi_sample" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    /*
    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Short variant calling
    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    */

    withName: DEEPVARIANT {

        ext.when         = { params.variant_caller == "deepvariant" }

        if(params.preset == 'revio' | params.preset == 'pacbio') {
            ext.model_type = 'PACBIO'
        } else if(params.preset == 'ONT_R10') {
            ext.model_type = 'ONT_R104'
        }
        publishDir = [
            path: { "${params.outdir}/short_variant_calling/deepvariant/${meta.id}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: DEEPTRIO {

        ext.when       = { params.variant_caller == "deeptrio" }
        ext.model_type = 'PACBIO'

        publishDir = [
            path: { "${params.outdir}/short_variant_calling/deeptrio/${meta.id}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: PEPPER_MARGIN_DEEPVARIANT {

        ext.when = { params.variant_caller == "pepper_margin_deepvariant" }

        if(params.preset == 'pacbio') {
            ext.model_type = '--hifi'
        } else if(params.preset == 'ONT_R9') {
            ext.model_type = '--ont_r9_guppy5_sup'
        } else if(params.preset == 'ONT_R10') {
            ext.model_type = '--ont_r10_q20'
        }

        publishDir = [
            path: { "${params.outdir}/short_variant_calling/pepper_margin_deepvariant/${meta.id}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: GLNEXUS {
        ext.args = '--config DeepVariant_unfiltered'
        publishDir = [
            path: { "${params.outdir}/short_variant_calling/glnexus" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: BCFTOOLS_CONCAT_SINGLESAMPLE {

        ext.args = '--allow-overlaps'

        publishDir = [
            path: { "${params.outdir}/short_variant_calling/merged_snv_calls/${meta.id}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: BCFTOOLS_CONCAT_DV {

        ext.args = '--allow-overlaps'

        publishDir = [
            path: { "${params.outdir}/short_variant_calling/bcftools/concat/dv/${meta.id}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: BCFTOOLS_SORT_CONCAT_SINGLESAMPLE {

        publishDir = [
            path: { "${params.outdir}/short_variant_calling/merged_snv_calls/${meta.id}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: TABIX_TABIX_MERGED_SINGLESAMPLE {

        publishDir = [
            path: { "${params.outdir}/short_variant_calling/merged_snv_calls/${meta.id}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: TABIX_TABIX_MERGED_MULTISAMPLE {

        publishDir = [
            path: { "${params.outdir}/short_variant_calling/merged_snv_calls/${meta.id}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
    /*
    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Tandem repeats
    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    */

    withName: TRGT {
        publishDir = [
            path: { "${params.outdir}/repeat_analysis/trgt/out/${meta.id}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: SAMTOOLS_SORT_TRGT {
        publishDir = [
            path: { "${params.outdir}/repeat_analysis/trgt/processed/${meta.id}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
    withName: SAMTOOLS_INDEX_TRGT {
        publishDir = [
            path: { "${params.outdir}/repeat_analysis/trgt/processed/${meta.id}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: BCFTOOLS_SORT_TRGT {
        ext.args = "--output-type b"
        publishDir = [
            path: { "${params.outdir}/repeat_analysis/trgt/processed/${meta.id}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
    withName: BCFTOOLS_INDEX_TRGT {
        publishDir = [
            path: { "${params.outdir}/repeat_analysis/trgt/processed/${meta.id}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
    withName: BCFTOOLS_QUERY_TRGT {
        ext.args = "-f '%CHROM\\t%POS\\t%REF\\t%ALT\\t%ID[\\t%GT][\\t%TRID]\\t%INFO\n'"
        publishDir = [
            path: { "${params.outdir}/repeat_analysis/trgt/processed/${meta.id}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: BCFTOOLS_MERGE {
        ext.args = "--output-type b"
        publishDir = [
            path: { "${params.outdir}/repeat_analysis/trgt/processed/${meta.id}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    /*
    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    SNV Annotation
    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    */

    withName: BCFTOOLS_NORM {
        ext.args = "-m - --output-type b -w 10000"
        publishDir = [
            path: { "${params.outdir}/snv_annotation/bcftools/norm/${meta.id}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: ECHTVAR_ANNO {

        // Do we want to filter variants here?
        //ext.args = ""

        publishDir = [
            path: { "${params.outdir}/snv_annotation/echtvar/anno/${meta.id}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: ECHTVAR_ENCODE {

        // Do we want to filter variants here?
        //ext.args = ""

        publishDir = [
            path: { "${params.outdir}/snv_annotation/echtvar/encode/${meta.id}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
    withName: BCFTOOLS_VIEW_EXCLUDE_SAMPLE {

        publishDir = [
            path: { "${params.outdir}/snv_annotation/bcftools/view/${meta.id}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
    withName: BCFTOOLS_FILLTAGS_ANNO {

        ext.args = "--output-type z"

        publishDir = [
            path: { "${params.outdir}/snv_annotation/bcftools/filltags_anno/${meta.id}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
    withName: ENSEMBLVEP_VEP {

        ext.args = "--vcf"

        publishDir = [
            path: { "${params.outdir}/snv_annotation/ensemblvep/vep/${meta.id}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    /*
    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Align reads
    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    */

     withName: FASTP {
            ext.args = "--disable_adapter_trimming --disable_quality_filtering --split_by_lines ${params.split_fastq * 4}"

        publishDir = [
            path: { "${params.outdir}/preprocessing/fastp/${meta.id}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: MINIMAP2_ALIGN {
        if(params.preset == 'revio' | params.preset == 'pacbio') {
            ext.args = "-y -x map-hifi --secondary=no"
        } else if(params.preset == 'ONT_R9' | params.preset == 'ONT_R10') {
            ext.args = "-y -x map-ont --secondary=no"
        }

        publishDir = [
            path: { "${params.outdir}/aligned_reads/minimap2/${meta.id}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: SAMTOOLS_INDEX_MINIMAP2_ALIGN {
        publishDir = [
            path: { "${params.outdir}/aligned_reads/minimap2/${meta.id}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    /*
    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Phasing
    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    */

    withName: BCFTOOLS_REHEADER {
        publishDir = [
            path: { "${params.outdir}/phasing/bcftools_reheader/${meta.id}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: HIPHASE_SNV {
        // NOTE: Do not use phased variant calls for analysis
        ext.args = "--ignore-read-groups"

        publishDir = [
            path: { "${params.outdir}/phasing/hiphase/snv/${meta.id}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
    withName: HIPHASE_SV {
        // NOTE: Do not use phased variant calls for analysis
        ext.args = "--ignore-read-groups --global-realignment-cputime 300"

        publishDir = [
            path: { "${params.outdir}/phasing/hiphase/sv/${meta.id}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
    withName: WHATSHAP_PHASE {
        // NOTE: Do not use phased variant calls for analysis
        ext.args = '--ignore-read-groups --indels --distrust-genotypes'

        publishDir = [
            path: { "${params.outdir}/phasing/whatshap/phase/${meta.id}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: WHATSHAP_STATS {
        publishDir = [
            path: { "${params.outdir}/phasing/whatshap/stats/${meta.id}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: WHATSHAP_HAPLOTAG {
        // TODO: Should supplementary be tagged?
        ext.args = '--ignore-read-groups --tag-supplementary'

        publishDir = [
            path: { "${params.outdir}/phasing/whatshap/haplotag/${meta.id}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
    withName: SAMTOOLS_INDEX_WHATSHAP {
        publishDir = [
            path: { "${params.outdir}/phasing/whatshap/haplotag/${meta.id}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    /*
    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Methylation
    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    */

    withName: MODKIT_PILEUP {
        ext.args = '--combine-mods --cpg --combine-strands'

        publishDir = [
            path: { "${params.outdir}/methylation/modkit/pileup/${meta.id}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: MODKIT_PILEUP_HAPLOTYPES {
        ext.args = '--combine-mods --cpg --combine-strands --partition-tag HP'

        publishDir = [
            path: { "${params.outdir}/methylation/modkit/pileup/${meta.id}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    /*
    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Summary
    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    */

    withName: CUSTOM_DUMPSOFTWAREVERSIONS {
        publishDir = [
            path: { "${params.outdir}/pipeline_info" },
            mode: params.publish_dir_mode,
            pattern: '*_versions.yml'
        ]
    }
}
