/*
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Config file for defining DSL2 per module options and publishing paths
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Available keys to override module options:
        ext.args   = Additional arguments appended to command in module.
        ext.args2  = Second set of arguments appended to command in module (multi-tool modules).
        ext.args3  = Third set of arguments appended to command in module (multi-tool modules).
        ext.prefix = File name prefix for output files.
----------------------------------------------------------------------------------------
*/

process {

    publishDir = [
        path: { "${params.outdir}/${task.process.tokenize(':')[-1].tokenize('_')[0].toLowerCase()}" },
        mode: params.publish_dir_mode,
        saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
    ]

    withName: SAMPLESHEET_CHECK {
        publishDir = [
            path: { "${params.outdir}/pipeline_info" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: FASTQC {
        ext.args = '--quiet'
        publishDir = [
            path: { "${params.outdir}/qc/fastqc/${meta.id}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
    
    withName: FQCRS {
        publishDir = [
            path: { "${params.outdir}/qc/fqcrs/${meta.id}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: CRAMINO {
        ext.args = '--karyotype --hist'
        publishdir = [
            path: { "${params.outdir}/qc/cramino/${meta.id}" },
            mode: params.publish_dir_mode,
            saveas: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: YAK {
        publishDir = [
            // Maybe change this to trio-id?
            path: { "${params.outdir}/genome_assembly/yak/${meta.id}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
    withName: HIFIASM {
        publishDir = [
            // Maybe change this to trio-id?
            path: { "${params.outdir}/genome_assembly/hifiasm/${meta.id}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
    
    withName: GFASTATS {
        ext.args = '--discover-paths'
        publishDir = [
            path: { "${params.outdir}/genome_assembly/gfastats/${meta.id}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
    
    withName: DIPCALL {
        publishDir = [
            path: { "${params.outdir}/assembly_variant_calling/dipcall/${meta.id}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
    
    withName: SNIFFLES {
        publishDir = [
            path: { "${params.outdir}/structural_variant_calling/sniffles/single_sample/${meta.id}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
    
    withName: SNIFFLES_MULTISAMPLE {
        publishDir = [
            path: { "${params.outdir}/structural_variant_calling/sniffles/multi_sample" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
    withName: DEEPVARIANT {
        
        ext.when         = { params.variant_caller == "deepvariant" }

        if(params.preset == 'revio' | params.preset == 'pacbio') {
            ext.model_type = 'PACBIO'
        } else if(params.preset == 'ONT_R10') {
            ext.model_type = 'ONT_R104'
        }
        publishDir = [
            path: { "${params.outdir}/short_variant_calling/deepvariant/${meta.id}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
    
    withName: DEEPTRIO {
        
        ext.when       = { params.variant_caller == "deeptrio" }
        ext.model_type = 'PACBIO'
        
        publishDir = [
            path: { "${params.outdir}/short_variant_calling/deeptrio/${meta.id}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: PEPPER_MARGIN_DEEPVARIANT {

        ext.when = { params.variant_caller == "pepper_margin_deepvariant" }
        
        if(params.preset == 'pacbio') {
            ext.model_type = '--hifi'
        } else if(params.preset == 'ONT_R9') {
            ext.model_type = '--ont_r9_guppy5_sup'
        } else if(params.preset == 'ONT_R10') {
            ext.model_type = '--ont_r10_q20'
        }
        
        publishDir = [
            path: { "${params.outdir}/short_variant_calling/pepper_margin_deepvariant/${meta.id}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: GLNEXUS {
        ext.args = '--config DeepVariant_unfiltered'
        publishDir = [
            path: { "${params.outdir}/short_variant_calling/glnexus" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
    
    withName: TRGT {
        publishDir = [
            path: { "${params.outdir}/repeat_analysis/trgt/out/${meta.id}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
    withName: TRVZ {
        publishDir = [
            path: { "${params.outdir}/repeat_analysis/trvz/${meta.id}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
     withName: SAMTOOLS_SORT_TRGT {
        publishDir = [
            path: { "${params.outdir}/repeat_analysis/trgt/processed/${meta.id}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
    withName: SAMTOOLS_INDEX_TRGT {
        publishDir = [
            path: { "${params.outdir}/repeat_analysis/trgt/processed/${meta.id}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
    withName: BCFTOOLS_SORT_TRGT {
        ext.args = "--output-type b"
        publishDir = [
            path: { "${params.outdir}/repeat_analysis/trgt/processed/${meta.id}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
    withName: BCFTOOLS_INDEX_TRGT {
        publishDir = [
            path: { "${params.outdir}/repeat_analysis/trgt/processed/${meta.id}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
    withName: BCFTOOLS_QUERY_TRGT {
        ext.args = "-f '%CHROM\\t%POS\\t%REF\\t%ALT\\t%ID[\\t%GT][\\t%TRID]\\t%INFO\n'"
        publishDir = [
            path: { "${params.outdir}/repeat_analysis/trgt/processed/${meta.id}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
    
    withName: GAWK {
        ext.args = "'{if(\$6!=\".\" && \$6!=\"0/0\") print \$6 > \$7\".txt\"}'"
        publishDir = [
            path: { "${params.outdir}/repeat_analysis/trgt/processed/${meta.id}/awk" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: CUSTOM_DUMPSOFTWAREVERSIONS {
        publishDir = [
            path: { "${params.outdir}/pipeline_info" },
            mode: params.publish_dir_mode,
            pattern: '*_versions.yml'
        ]
    }

    withName: MINIMAP2_ALIGN {
        if(params.preset == 'revio' | params.preset == 'pacbio') {
            ext.args = "-y -x map-hifi --secondary=no"
        } else if(params.preset == 'ONT_R9' | params.preset == 'ONT_R10') {
            ext.args = "-y -x map-ont --secondary=no"
        }
        
        publishDir = [
            path: { "${params.outdir}/aligned_reads/minimap2/${meta.id}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: SAMTOOLS_INDEX_MINIMAP2_ALIGN {
        publishDir = [
            path: { "${params.outdir}/aligned_reads/minimap2/${meta.id}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
    withName: MODKIT_PILEUP {
        ext.args2 = '--combine-mods --cpg --combine-strands'

        publishDir = [
            path: { "${params.outdir}/methylation/modkit/pileup/${meta.id}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
    
    withName: WHATSHAP_PHASE {
        // TODO: Should -distrust-genotypes be used?
        ext.args = '--ignore-read-groups'

        publishDir = [
            path: { "${params.outdir}/short_variant_calling/whatshap/phase/${meta.id}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
    
    withName: WHATSHAP_STATS {
        publishDir = [
            path: { "${params.outdir}/short_variant_calling/whatshap/stats/${meta.id}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: WHATSHAP_HAPLOTAG {
        // TODO: Should supplementary be tagged?
        ext.args = '--ignore-read-groups --tag-supplementary'

        publishDir = [
            path: { "${params.outdir}/aligned_reads/whatshap/${meta.id}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
    withName: SAMTOOLS_INDEX_WHATSHAP {
        publishDir = [
            path: { "${params.outdir}/aligned_reads/whatshap/${meta.id}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: SAMTOOLS_VIEW_HP1 {
        ext.args = '-e \'[HP]==1\' --output-fmt bam'
        ext.prefix = 'hp1'
        
        publishDir = [
            path: { "${params.outdir}/aligned_reads/samtools/view_hp1/${meta.id}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
    
    withName: SAMTOOLS_INDEX_HP1 {
        publishDir = [
            path: { "${params.outdir}/aligned_reads/samtools/view_hp1/${meta.id}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: SAMTOOLS_VIEW_HP2 {
        ext.args = '-e \'[HP]==2\' --output-fmt bam'
        ext.prefix = 'hp2'
        
        publishDir = [
            path: { "${params.outdir}/aligned_reads/samtools/view_hp2/${meta.id}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
    
    withName: SAMTOOLS_INDEX_HP2 {
        publishDir = [
            path: { "${params.outdir}/aligned_reads/samtools/view_hp2/${meta.id}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: MOSDEPTH {
        ext.args = "--by 500 --no-per-base"
        
        publishDir = [
            path: { "${params.outdir}/qc/mosdepth/${meta.id}" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: MINIMAP2_INDEX {
        publishDir = [
            path: { "${params.outdir}/prepare_genome/minimap2/index" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
    
    withName: SAMTOOLS_FAIDX {
        publishDir = [
            path: { "${params.outdir}/prepare_genome/samtools/faidx" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
}
